<?php
class MailMessage { var $mailText = false; var $attributes = array('FROM' => '', 'TO' => '', 'CC' => '', 'BCC' => '', 'SUBJECT' => '', 'CHARSET' => 'utf-8', "CONTENT-TYPE" => "text/plain", "MULTIPART" => "mixed", "FILE-DISPOSITION" => "attachment"); var $mimes = array('jpg' => 'image/jpeg', 'jpeg' => 'image/jpeg', 'gif' => 'image/gif', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'zip' => 'application/zip', 'rar' => 'application/rar', 'doc' => 'application/msword', 'xls' => 'application/msexcel'); var $attachments = array(); var $body = ''; function MailMessage($attributes, $body = '', $attachments = array()) { $this->_setAttributes($attributes); $this->setBody($body); $this->addAttachments($attachments); } function set($name, $value) { $this->attributes[strtoupper($name)] = $value; } function get($name) { return $this->attributes[strtoupper($name)]; } function setTo($to, $cc = '', $bcc = '') { $this->set('TO', $to); if ($cc != '') $this->set('CC', $cc); if ($bcc != '') $this->set('BCC', $bcc); } function setBody($text) { $this->body = $text; $this->mailText = ''; } function _setAttributes($attributes) { foreach ($attributes as $name => $value) $this->set($name, $value); } function addAttachments($files) { if (is_array($files)) foreach ($files as $file) $this->attachments[] = $file; else $this->attachments[] = $files; } function clearAttachments() { $this->attachments = array(); }
   function _makeAttachmentPart($file) { if (is_array($file)) { $name = $file["NAME"]; preg_match("/([^.]+)$/",$file["NAME"],$matches); $extension = $matches[0]; $type = (isset($this->mimes[$extension]) ? $this->mimes[$extension] : 'application/octet-stream'); $dataLen = mb_strlen($data = base64_encode($file["CONTENT"]), 'utf-8'); } else { if (!file_exists($file)) trigger_error("Unable to open file ".preg_replace('/^(.+)\/([^\/]+)$/', '\\2', $file), ERROR); $name = basename($file); $info = pathinfo($file); $type = (isset($this->mimes[$info['extension']]) ? $this->mimes[$info['extension']] : 'application/octet-stream'); $fid = fopen($file, 'r'); $dataLen = mb_strlen($data = base64_encode(fread($fid, filesize($file))), 'utf-8'); fclose($fid); } for ($text = '', $posted = 0, $cutLen = 76; $posted < $dataLen; $posted += $cutLen) { if ($posted + $cutLen > $dataLen) $cutLen = $dataLen - $posted; $text .= mb_substr($data, $posted, $cutLen, 'utf-8')."\n"; } $text = "Content-Type: $type; name=\"".$this->encodeString($name)."\"\nContent-ID: <".md5($file).">\nContent-Transfer-Encoding: base64\nContent-Disposition: ".$this->get('FILE-DISPOSITION')."; filename=\"".$this->encodeString($name)."\"\n\n$text"; return $text; } function loadTemplate($template, $parms) { $this->body = MailMessage::_HandleTemplate($template, $parms); } function &GetFromTemplate($attributes, $template, $parms = array(), $attachments = array()) { return new MailMessage($attributes, MailMessage::_HandleTemplate($template, $parms), $attachments); } function _HandleTemplate($template, $parms) { if (!file_exists($template)) trigger_error("Unable to load template ".preg_replace('/^(.+)\/([^\/]+)$/', '\\2', $template), ERROR); ob_start(); include($template); $text = ob_get_contents(); ob_end_clean(); return $text; }
   function IsValidAddress($email) { if (preg_match('/<(.+)>$/', $email, $m)) $email = $m[1]; return preg_match("/^[0-9A-Za-z\._-]+@[0-9A-Za-z\._-]+\.[a-z]{2,4}/", $email); } function encodeString($str) { if (preg_match('/^=\?/',$str)) return $str; return '=?'.$this->get('CHARSET').'?B?'.base64_encode($str).'?='; } function encodeEmail($email) { if (preg_match('/([^<>]+)\s+<([^<>]+)>/',$email,$m)) { $name = $this->encodeString($m[1]); $email = $m[2]; return "$name <$email>"; } return $email; } function prepare() { if (!$this->mailText) { $this->mailHeaders = 'From: '.$this->encodeEmail($this->get('FROM'))."\n". 'Reply-To: '.$this->encodeEmail($this->get('FROM'))."\n"; if ($this->get('CC') != '') $this->mailHeaders .= 'Cc: '.$this->encodeEmail($this->get('CC'))."\n"; if ($this->get('BCC') != '') $this->mailHeaders .= 'Bcc: '.$this->encodeEmail($this->get('BCC'))."\n"; $this->mailHeaders .= "Mime-Version: 1.0\n"; $this->mailHeaders .= "X-Mailer: PHP\n"; if (sizeOf($this->attachments) > 0) { $bound = "--------".strtoupper(uniqid('')); $this->mailHeaders .= "Content-Type: multipart/".$this->get('MULTIPART')."; boundary=\"$bound\""; $this->mailText = "--$bound\n". "Content-Type: ".$this->get('CONTENT-TYPE')."; charset=".$this->get('CHARSET')."\n". "Content-Transfer-Encoding: 8bit\n\n". $this->body."\n"; foreach ($this->attachments as $file) $this->mailText .= "--$bound\n".$this->_makeAttachmentPart($file); $this->mailText .= "\n--$bound--\n\n"; } else { $this->mailHeaders .= "Content-Type: ".$this->get('CONTENT-TYPE')."; charset=".$this->get('CHARSET')."\n". "Content-Transfer-Encoding: 8bit"; $this->mailText = $this->body; } } }
   function send($emailTo = '') { 
   $emailTo = (!$emailTo ? $this->get('TO') : $emailTo); 
   if (!$this->mailText) { 
    if (!MailMessage::IsValidAddress($emailTo) || ($this->get('CC') && !MailMessage::IsValidAddress($this->get('CC'))) || ($this->get('BCC') && !MailMessage::IsValidAddress($this->get('BCC')))) trigger_error('E-Mail address not valid!', ERROR); 
    $this->mailHeaders = 'From: '.$this->encodeEmail($this->get('FROM'))."\n". 'Reply-To: '.$this->encodeEmail($this->get('FROM'))."\n"; 
    if ($this->get('CC') != '') $this->mailHeaders .= 'Cc: '.$this->encodeEmail($this->get('CC'))."\n"; 
    if ($this->get('BCC') != '') $this->mailHeaders .= 'Bcc: '.$this->encodeEmail($this->get('BCC'))."\n";
    $this->mailHeaders .= "MIME-Version: 1.0\n"; 
    $this->mailHeaders .= "X-Mailer: PHP\n";
    if (sizeOf($this->attachments) > 0) {
        $bound = "--".strtoupper(uniqid(''));
        $related = "--".strtoupper(uniqid(''));
        $this->mailHeaders .= "Content-Type: multipart/".$this->get('MULTIPART').";\n boundary=\"{$bound}\"\n\n--{$bound}\n"; //mixed

        //обёртывание в related
        $this->mailHeaders .= "Content-Type: multipart/related;\n boundary=\"{$related}\"\n\n\n--{$related}\n"."Content-Type: ".$this->get('CONTENT-TYPE')."; charset=".$this->get('CHARSET')."\n"."Content-Transfer-Encoding: 8bit\n\n".$this->body."\n\n";
        //related

        //Картинки inline images
        foreach ($this->attachments as $file) if(preg_match('/\.(jpg|jpeg|bmp|gif|png|tga)$/i', $file)) $this->mailText .= "\n--{$related}\n".$this->_makeAttachmentPart($file, 'inline');
        $this->mailText .= "\n--{$related}--\n\n";
        //end of related
        
        //Приаттаченные файлы
        foreach ($this->attachments as $file) if(!preg_match('/\.(jpg|jpeg|bmp|gif|png|tga)$/i', $file)) $this->mailText .= "\n--{$bound}\n".$this->_makeAttachmentPart($file);
        $this->mailText .= "\n--{$bound}--\n\n";
        //end of bound
    }
    else {
        $this->mailHeaders .= "Content-Type: ".$this->get('CONTENT-TYPE')."; charset=".$this->get('CHARSET')."\n". "Content-Transfer-Encoding: 8bit"; 
        $this->mailText = $this->body;
    }
   }
   if (IS_OFFICE === true) $emailTo = Site::GetParms('admin_email');
var_dump($this->mailText, $this->mailHeaders);
   var_dump(mail($this->encodeEmail($emailTo), $this->encodeString($this->get('SUBJECT')), $this->mailText, $this->mailHeaders));
   }
}
?>
